
package ws;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ProductoService", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ProductoService {


    /**
     * 
     * @param producto
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "remove", targetNamespace = "http://ws/", className = "ws.Remove")
    @Action(input = "http://ws/ProductoService/remove")
    public void remove(
        @WebParam(name = "producto", targetNamespace = "")
        Producto producto);

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "count", targetNamespace = "http://ws/", className = "ws.Count")
    @ResponseWrapper(localName = "countResponse", targetNamespace = "http://ws/", className = "ws.CountResponse")
    @Action(input = "http://ws/ProductoService/countRequest", output = "http://ws/ProductoService/countResponse")
    public int count();

    /**
     * 
     * @param id
     * @return
     *     returns ws.Producto
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "find", targetNamespace = "http://ws/", className = "ws.Find")
    @ResponseWrapper(localName = "findResponse", targetNamespace = "http://ws/", className = "ws.FindResponse")
    @Action(input = "http://ws/ProductoService/findRequest", output = "http://ws/ProductoService/findResponse")
    public Producto find(
        @WebParam(name = "id", targetNamespace = "")
        Object id);

    /**
     * 
     * @param producto
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "create", targetNamespace = "http://ws/", className = "ws.Create")
    @Action(input = "http://ws/ProductoService/create")
    public void create(
        @WebParam(name = "producto", targetNamespace = "")
        Producto producto);

    /**
     * 
     * @param desde
     * @return
     *     returns java.util.List<ws.Producto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "caducadosDesde", targetNamespace = "http://ws/", className = "ws.CaducadosDesde")
    @ResponseWrapper(localName = "caducadosDesdeResponse", targetNamespace = "http://ws/", className = "ws.CaducadosDesdeResponse")
    @Action(input = "http://ws/ProductoService/caducadosDesdeRequest", output = "http://ws/ProductoService/caducadosDesdeResponse")
    public List<Producto> caducadosDesde(
        @WebParam(name = "desde", targetNamespace = "")
        Date desde);

    /**
     * 
     * @param id
     * @param cantidad
     */
    @WebMethod
    @RequestWrapper(localName = "reponer", targetNamespace = "http://ws/", className = "ws.Reponer")
    @ResponseWrapper(localName = "reponerResponse", targetNamespace = "http://ws/", className = "ws.ReponerResponse")
    @Action(input = "http://ws/ProductoService/reponerRequest", output = "http://ws/ProductoService/reponerResponse")
    public void reponer(
        @WebParam(name = "id", targetNamespace = "")
        Object id,
        @WebParam(name = "cantidad", targetNamespace = "")
        Integer cantidad);

    /**
     * 
     * @param id
     * @param cantidad
     * @return
     *     returns java.lang.Float
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "compar", targetNamespace = "http://ws/", className = "ws.Compar")
    @ResponseWrapper(localName = "comparResponse", targetNamespace = "http://ws/", className = "ws.ComparResponse")
    @Action(input = "http://ws/ProductoService/comparRequest", output = "http://ws/ProductoService/comparResponse")
    public Float compar(
        @WebParam(name = "id", targetNamespace = "")
        Object id,
        @WebParam(name = "cantidad", targetNamespace = "")
        int cantidad);

    /**
     * 
     * @return
     *     returns java.util.List<ws.Producto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findAll", targetNamespace = "http://ws/", className = "ws.FindAll")
    @ResponseWrapper(localName = "findAllResponse", targetNamespace = "http://ws/", className = "ws.FindAllResponse")
    @Action(input = "http://ws/ProductoService/findAllRequest", output = "http://ws/ProductoService/findAllResponse")
    public List<Producto> findAll();

    /**
     * 
     * @param range
     * @return
     *     returns java.util.List<ws.Producto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findRange", targetNamespace = "http://ws/", className = "ws.FindRange")
    @ResponseWrapper(localName = "findRangeResponse", targetNamespace = "http://ws/", className = "ws.FindRangeResponse")
    @Action(input = "http://ws/ProductoService/findRangeRequest", output = "http://ws/ProductoService/findRangeResponse")
    public List<Producto> findRange(
        @WebParam(name = "range", targetNamespace = "")
        List<Integer> range);

    /**
     * 
     * @param producto
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "edit", targetNamespace = "http://ws/", className = "ws.Edit")
    @Action(input = "http://ws/ProductoService/edit")
    public void edit(
        @WebParam(name = "producto", targetNamespace = "")
        Producto producto);

}
